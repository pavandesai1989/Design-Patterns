#include <iostream>


Define abstract interfaces for Button and Scrollbar.

// Abstract Button
class Button {
public:
    virtual ~Button() = default;
    virtual void render() = 0;
};

// Abstract Scrollbar
class Scrollbar {
public:
    virtual ~Scrollbar() = default;
    virtual void render() = 0;
};


Implement concrete versions of Button and Scrollbar for different themes or styles.


// Windows Button
class WindowsButton : public Button {
public:
    void render() override {
        std::cout << "Rendering Windows Button" << std::endl;
    }
};

// Windows Scrollbar
class WindowsScrollbar : public Scrollbar {
public:
    void render() override {
        std::cout << "Rendering Windows Scrollbar" << std::endl;
    }
};

// Mac Button
class MacButton : public Button {
public:
    void render() override {
        std::cout << "Rendering Mac Button" << std::endl;
    }
};

// Mac Scrollbar
class MacScrollbar : public Scrollbar {
public:
    void render() override {
        std::cout << "Rendering Mac Scrollbar" << std::endl;
    }
};


//Define an abstract factory interface that declares methods for creating buttons and scrollbars.

// Abstract Factory
class GUIFactory {
public:
    virtual ~GUIFactory() = default;
    virtual Button* createButton() = 0;
    virtual Scrollbar* createScrollbar() = 0;
};

//Implement concrete factories for creating specific sets of products.
// Windows Factory
class WindowsFactory : public GUIFactory {
public:
    Button* createButton() override {
        return new WindowsButton();
    }
    
    Scrollbar* createScrollbar() override {
        return new WindowsScrollbar();
    }
};

// Mac Factory
class MacFactory : public GUIFactory {
public:
    Button* createButton() override {
        return new MacButton();
    }
    
    Scrollbar* createScrollbar() override {
        return new MacScrollbar();
    }
};


//client code
int main() {
    // Choose a factory based on the desired platform
    GUIFactory* factory;
    
    // Simulate choosing a factory based on user input or configuration
    std::string platform = "Windows";  // or "Mac"
    
    if (platform == "Windows") {
        factory = new WindowsFactory();
    } else {
        factory = new MacFactory();
    }

    // Create and render button and scrollbar using the factory
    Button* button = factory->createButton();
    Scrollbar* scrollbar = factory->createScrollbar();
    
    button->render();
    scrollbar->render();

    // Clean up
    delete button;
    delete scrollbar;
    delete factory;

    return 0;
}



