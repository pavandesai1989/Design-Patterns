/*
The Factory Method pattern is a design pattern used to define a runtime interface for creating an object. Itâ€™s called a factory because it creates various types of objects
without necessarily knowing what kind of object it creates or how to create it.
*/

***************** NEED**********
#include <iostream>
using namespace std;
 
// Library classes
class Vehicle {
public:
    virtual void printVehicle() = 0;
};
class TwoWheeler : public Vehicle {
public:
    void printVehicle()  {
        cout << "I am two wheeler" << endl;
    }
};
class FourWheeler : public Vehicle {
    public:
    void printVehicle()  {
        cout << "I am four wheeler" << endl;
    }
};
 
// Client (or user) class
class Client {
public:
    Client(int type)  {
 
        // Client explicitly creates classes according to type
        if (type == 1)
            pVehicle = new TwoWheeler();
        else if (type == 2)
            pVehicle = new FourWheeler();
        else
            pVehicle = NULL;
    }
 
    ~Client()   {
        if (pVehicle)
        {
            delete[] pVehicle;
            pVehicle = NULL;
        }
    }
 
    Vehicle* getVehicle() {
        return pVehicle;
    }
private:
    Vehicle *pVehicle;
};
 
// Driver program
int main() {
    Client *pClient = new Client(1);
    Vehicle * pVehicle = pClient->getVehicle();
    pVehicle->printVehicle();
    return 0;
}


What are the problems with the above design? 
As you must have observed in the above example, the Client creates objects of either TwoWheeler or FourWheeler based on some input during constructing
its object. 
Say, the library introduces a new class ThreeWheeler to incorporate three-wheeler vehicles also. What would happen? The client will end up
chaining a new else if in the conditional ladder to create objects of ThreeWheeler. Which in turn will need the Client to be recompiled. So, each 
time a new change is made at the library side, the Client would need to make some corresponding changes at its end and recompile the code. Sounds bad? 
This is a very bad practice of design.

*************************************

#include<iostream>

using namespace std;

enum VehicleType
{
	VT_TwoWheeler,
	VT_ThreeWheeler,
	VT_FourWheeler
};


class Vehicle
{
public:
	virtual void PrintVehicle() = 0;
};

class TwoWheeler:public Vehicle
{
public:
	void PrintVehicle()
	{
		cout<<"I am Two wheeler"<<endl;
	}
};

class ThreeWheeler:public Vehicle
{
public:
	void PrintVehicle()
	{
		cout<<"I am Three wheeler"<<endl;
	}
};

class Fourwheeler:public Vehicle
{
public:
	void PrintVehicle()
	{
		cout<<"I am Four wheeler"<<endl;
	}
};

class Factory
{
public:
	Factory()
	{
		cout<<"I am factory "<<endl;
	}

public:
	static Vehicle* GetVehicle(VehicleType type)
	{
		if(type == VT_TwoWheeler)
			return new TwoWheeler;
		else if(type == VT_ThreeWheeler)
			return new ThreeWheeler;
		else if(type == VT_FourWheeler)
			return new Fourwheeler;
	}
};


int main()
{
	VehicleType type = VT_FourWheeler;

	Vehicle *pVehicle = Factory::GetVehicle(type);

	pVehicle->PrintVehicle();


	return 0;
}
