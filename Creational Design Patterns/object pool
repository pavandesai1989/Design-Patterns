#include <iostream>
#include <vector>
#include <algorithm>

// Define the maximum number of connections in the pool
#define MAX_CONNECTIONS 3

// Simulate a database connection
class DatabaseConnection {
public:
    DatabaseConnection() {
        std::cout << "DatabaseConnection created." << std::endl;
    }

    ~DatabaseConnection() {
        std::cout << "DatabaseConnection destroyed." << std::endl;
    }

    // Simulate a database operation
    void query(const std::string& sql) {
        std::cout << "Executing query: " << sql << std::endl;
    }
};

// Database Connection Pool class
class ConnectionPool {
private:
    std::vector<DatabaseConnection*> pool;   // Vector to hold available connections
    std::vector<DatabaseConnection*> inUse;  // Vector to track connections currently in use
    size_t maxSize;  // Maximum size of the pool

public:
    // Constructor: Initializes the pool with a set number of DatabaseConnections
    ConnectionPool() : maxSize(MAX_CONNECTIONS) {
        for (size_t i = 0; i < maxSize; ++i) {
            pool.push_back(new DatabaseConnection()); // Create new connections and add to the vector
        }
    }

    // Destructor: Cleans up all connections in the pool
    ~ConnectionPool() {
        for (auto conn : pool) {
            delete conn;  // Delete each connection in the pool
        }
        for (auto conn : inUse) {
            delete conn;  // Delete each connection in use
        }
    }

    // Method to acquire a connection from the pool
    DatabaseConnection* acquire() {
        if (pool.empty()) {
            // If no available connections, create a new one if the pool has not reached its max size
            if (inUse.size() < maxSize) {
                std::cout << "No available connections in the pool. Creating a new one." << std::endl;
                return new DatabaseConnection();
            } else {
                std::cerr << "Pool is full, and no more connections can be created." << std::endl;
                return nullptr; // Pool is full
            }
        }

        // Retrieve a connection from the back of the vector
        DatabaseConnection* conn = pool.back();
        pool.pop_back();
        inUse.push_back(conn); // Mark the connection as in use
        return conn;
    }

    // Method to release a connection back to the pool
    void release(DatabaseConnection* conn) {
        auto it = std::find(inUse.begin(), inUse.end(), conn);
        if (it != inUse.end()) {
            inUse.erase(it); // Remove the connection from the in-use vector
            if (pool.size() < maxSize) {
                pool.push_back(conn); // Return the connection to the pool
            } else {
                std::cout << "Pool is full. Destroying connection." << std::endl;
                delete conn; // Pool is full, destroy the connection
            }
        } else {
            std::cerr << "Connection not managed by pool. Destroying connection." << std::endl;
            delete conn; // Connection does not belong to the pool, destroy it
        }
    }
};

int main() {
    // Create a connection pool with a fixed size defined by MAX_CONNECTIONS
    ConnectionPool pool;

    // Acquire and use database connections from the pool
    {
        DatabaseConnection* conn1 = pool.acquire();
        if (conn1) conn1->query("SELECT * FROM users");

        DatabaseConnection* conn2 = pool.acquire();
        if (conn2) conn2->query("SELECT * FROM products");

        DatabaseConnection* conn3 = pool.acquire();
        if (conn3) conn3->query("SELECT * FROM orders");

        // Attempt to acquire another connection
        DatabaseConnection* conn4 = pool.acquire();
        if (conn4) conn4->query("SELECT * FROM categories");

        // Release the connections back to the pool
        pool.release(conn1);
        pool.release(conn2);
        pool.release(conn3);
        pool.release(conn4);
    }

    // Attempt to acquire connections again
    {
        DatabaseConnection* conn5 = pool.acquire();
        if (conn5) conn5->query("SELECT * FROM suppliers");
        pool.release(conn5);
    }

    return 0;
}





Explanation:
std::vector:

pool: Manages available connections. std::vector is used here to allow efficient access and modification.
inUse: Keeps track of connections currently in use.
acquire() Method:

Retrieves a connection from the back of the pool vector and adds it to the inUse vector.
If the pool is empty, a new connection is created if the maximum pool size has not been reached.
release() Method:

Removes a connection from the inUse vector if it exists, and either returns it to the pool if there is room, or destroys it if the pool is full.
This approach simplifies the connection pool implementation by using std::vector, making the code easier to understand and maintain while still effectively managing the connection pool.
