#include <iostream>
#include <string>

// Step 1: Prototype Interface
class Student {
public:
    virtual Student* clone() const = 0;  // Clone method
    virtual void display() const = 0;    // Display student details
    virtual void setName(const std::string& newName) = 0;  // Modify cloned student
    virtual ~Student() {}                // Virtual destructor
};

// Step 2: Concrete Prototype - Student Class
class ConcreteStudent : public Student {
    std::string name;
    int age;
    std::string course;
public:
    ConcreteStudent(std::string n, int a, std::string c) : name(n), age(a), course(c) {}

    // Implement the clone() method
    Student* clone() const override {
        return new ConcreteStudent(*this);  // Clone itself
    }

    // Modify the student name (so clones can have different names)
    void setName(const std::string& newName) override {
        name = newName;
    }

    void display() const override {
        std::cout << "Student: " << name << ", Age: " << age << ", Course: " << course << "\n";
    }
};

// Step 3: Client Code
int main() {
    // Create an original student prototype
    ConcreteStudent* studentPrototype = new ConcreteStudent("John Doe", 20, "Computer Science");

    // Cloning student records and modifying them
    Student* student1 = studentPrototype->clone();
    student1->setName("Alice Smith");  // Modifying cloned object

    Student* student2 = studentPrototype->clone();
    student2->setName("Bob Johnson");  // Modifying another clone

    // Display original and cloned student details
    std::cout << "Original Student:\n";
    studentPrototype->display();

    std::cout << "Cloned Students:\n";
    student1->display();
    student2->display();

    // Clean up allocated memory
    delete studentPrototype;
    delete student1;
    delete student2;

    return 0;
}

**************shape clas*********
#include <iostream>
#include <vector>
using namespace std;

// Base Prototype
class Employee {
protected:
    string name;
    string position;
    int salary;

public:
    Employee(string n, string p, int s) : name(n), position(p), salary(s) {}

    // Prototype constructor (copy constructor)
    Employee(const Employee& source) {
        name = source.name;
        position = source.position;
        salary = source.salary;
    }

    // Setters and Getters
    void setName(string n) { name = n; }
    string getName() const { return name; }

    void setPosition(string p) { position = p; }
    string getPosition() const { return position; }

    void setSalary(int s) { salary = s; }
    int getSalary() const { return salary; }

    virtual Employee* clone() = 0; // Abstract clone method
    virtual void display() = 0; // Abstract display method
    virtual ~Employee() {} // Virtual destructor
};

// Concrete Prototype - Developer
class Developer : public Employee {
public:
    Developer(string n, int s) : Employee(n, "Developer", s) {}

    // Copy constructor (Prototype constructor)
    Developer(const Developer& source) : Employee(source) {}

    // Cloning method
    Employee* clone() override {
        return new Developer(*this);
    }

    void display() override {
        cout << "Developer: " << name << ", Salary: $" << salary << endl;
    }
};

// Concrete Prototype - Manager
class Manager : public Employee {
public:
    Manager(string n, int s) : Employee(n, "Manager", s) {}

    // Copy constructor (Prototype constructor)
    Manager(const Manager& source) : Employee(source) {}

    // Cloning method
    Employee* clone() override {
        return new Manager(*this);
    }

    void display() override {
        cout << "Manager: " << name << ", Salary: $" << salary << endl;
    }
};

// Client Code
class Company {
public:
    vector<Employee*> employees;

    void addEmployees() {
        Developer* dev1 = new Developer("Alice", 60000);
        employees.push_back(dev1);

        // Clone Developer
        Developer* dev2 = (Developer*)dev1->clone();
        dev2->setName("Bob");
        employees.push_back(dev2);

        Manager* manager1 = new Manager("Charlie", 90000);
        employees.push_back(manager1);
    }

    void cloneEmployees() {
        vector<Employee*> clonedEmployees;
        for (Employee* emp : employees) {
            clonedEmployees.push_back(emp->clone());
        }

        // Display cloned employees
        cout << "Cloned Employees:" << endl;
        for (Employee* emp : clonedEmployees) {
            emp->display();
            delete emp; // Free memory
        }
    }

    ~Company() {
        for (Employee* emp : employees) {
            delete emp;
        }
    }
};

// Main function
int main() {
    Company company;
    company.addEmployees();
    company.cloneEmployees();
    return 0;
}
