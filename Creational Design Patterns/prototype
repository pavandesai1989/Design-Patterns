#include <iostream>
#include <string>

// Step 1: Prototype Interface
class Student {
public:
    virtual Student* clone() const = 0;  // Clone method
    virtual void display() const = 0;    // Display student details
    virtual void setName(const std::string& newName) = 0;  // Modify cloned student
    virtual ~Student() {}                // Virtual destructor
};

// Step 2: Concrete Prototype - Student Class
class ConcreteStudent : public Student {
    std::string name;
    int age;
    std::string course;
public:
    ConcreteStudent(std::string n, int a, std::string c) : name(n), age(a), course(c) {}

    // Implement the clone() method
    Student* clone() const override {
        return new ConcreteStudent(*this);  // Clone itself
    }

    // Modify the student name (so clones can have different names)
    void setName(const std::string& newName) override {
        name = newName;
    }

    void display() const override {
        std::cout << "Student: " << name << ", Age: " << age << ", Course: " << course << "\n";
    }
};

// Step 3: Client Code
int main() {
    // Create an original student prototype
    ConcreteStudent* studentPrototype = new ConcreteStudent("John Doe", 20, "Computer Science");

    // Cloning student records and modifying them
    Student* student1 = studentPrototype->clone();
    student1->setName("Alice Smith");  // Modifying cloned object

    Student* student2 = studentPrototype->clone();
    student2->setName("Bob Johnson");  // Modifying another clone

    // Display original and cloned student details
    std::cout << "Original Student:\n";
    studentPrototype->display();

    std::cout << "Cloned Students:\n";
    student1->display();
    student2->display();

    // Clean up allocated memory
    delete studentPrototype;
    delete student1;
    delete student2;

    return 0;
}

