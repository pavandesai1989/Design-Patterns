
/*
Implement decorator design pattern
*/
#include <iostream>
#include<string>

using namespace std;

//interface 
class pizza
{
    public:
       virtual string type() = 0;
       virtual int getprice() = 0;
};

class basepizza:public pizza
{
    public:
        string type()
        {
            return "creating base pizza";
        }
        int getprice()
        {
            return 100;
        }

};

//decorator 
class pizzadecorator:public pizza
{
    protected:
       pizza* ptrpizza;

    public: 
       pizzadecorator(pizza* ob):ptrpizza(ob)
       {

       }
       string type()
       {
           return "decorator";
       }
       int getprice()
       {
           return 50;
       }

};

class topping:public pizzadecorator
{
    public: 
       topping(pizza* ob):pizzadecorator(ob)
       {

       }
       string type()
       {
           return ( ptrpizza->type() ) + " and adding topping";
       }
       int getprice()
       {
            return ptrpizza->getprice() + 150;
       }
};

class cheeztopping:public pizzadecorator
{
    public: 
       cheeztopping(pizza* ob):pizzadecorator(ob)
       {

       }
       string type()
       {
           return ptrpizza->type() + " and adding cheez topping";
       }
       int getprice()
       {
            return ptrpizza->getprice() + 250 ;
       }
};


using namespace std;
int main() 
{
    pizza* toppingob = new topping (new cheeztopping(new basepizza()));
    cout<<toppingob->type()<<endl;
    cout<<"price is "<< toppingob->getprice();


}











**************************************
/*
Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality. 
*/

#include<iostream>
using namespace std;

class Beverage
{
public:
	virtual int cost() = 0;
	virtual void GetDesc() = 0;
	virtual ~Beverage(){};
};

class Expresso : public Beverage
{
public:
	int cost()
	{
		return 100;
	}

	void GetDesc()
	{
		cout<<"Expresso being prepared"<<endl;
	}
};

class AddOnDecorator:public Beverage
{
protected:
	Beverage* pBev;

public:
	AddOnDecorator(Beverage *object):pBev(object)
	{
	}
};

class AddOnCaramel:public AddOnDecorator
{
public:
	AddOnCaramel(Beverage *ptr):AddOnDecorator(ptr)
	{
	}

	int cost()
	{
		return this->pBev->cost() + 50;
	}

	void GetDesc()
	{
		cout<<"caramel add on added"<<endl;
	}
};

class AddOnSoy:public AddOnDecorator
{
public:
	AddOnSoy(Beverage *ptr):AddOnDecorator(ptr)
	{
	}

	int cost()
	{
		return this->pBev->cost() + 25;
	}

	void GetDesc()
	{
		cout<<"Soy add on added"<<endl;
	}
};

int main()
{
	Beverage* pBev = new Expresso();
	cout<<pBev->cost()<<endl;

	Beverage* pCaramel = new AddOnCaramel(pBev);
	cout<<pCaramel->cost()<<endl;
	pCaramel->GetDesc();
	cout<<endl;

	Beverage* pSoy = new AddOnSoy(pCaramel);
	cout<<pSoy->cost()<<endl;
	pSoy->GetDesc();
	cout<<endl;


	return 0;
} 
