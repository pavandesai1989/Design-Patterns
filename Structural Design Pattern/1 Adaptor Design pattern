#include <iostream>
#include <string>
using namespace std;

// Old incompatible class (XML format)
class xmldata {
    string xmld;

public:
    xmldata(const string& str) : xmld(str) {}

    string getxmldata() const {
        return xmld;
    }
};

// Expected base interface (works with JSON)
class datatool {
protected:
    string jsondata;

public:
    datatool() = default;
    datatool(const string& ip) : jsondata(ip) {}

    virtual void analyse() {
        cout << "analysing the " << jsondata << endl;
    }

    virtual ~datatool() {}
};

// Adapter: makes xmldata compatible with datatool
class adaptor : public datatool {
    xmldata* pxml;  // raw pointer to xmldata

    static string convertXmlToJson(const string& xml) {
        return "json data from (" + xml + ")";
    }

public:
    adaptor(xmldata* p) : datatool(convertXmlToJson(p->getxmldata())), pxml(p) {}

    void analyse() override {
        cout << "converting the " << pxml->getxmldata() << " to json" << endl;
        datatool::analyse();
    }

    ~adaptor() {
        delete pxml; // manually delete
    }
};

// Client only understands datatool
class client {
public:
    void processdata(datatool* p) {
        if (p)
            p->analyse();
    }
};

int main() {
    // Create raw xmldata
    xmldata* xml = new xmldata("sample xml data");

    // Pass it to adapter, which now owns it
    datatool* tool = new adaptor(xml);

    client user;
    user.processdata(tool);

    delete tool; // clean up
    return 0;
}
