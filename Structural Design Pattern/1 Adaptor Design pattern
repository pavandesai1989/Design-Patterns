#include <iostream>
#include <memory>
#include <string>

using namespace std;

class xmldata
{
private:
    string xmld;

public:
    xmldata(const string& str) : xmld(str) {}

    string getxmldata() const
    {
        return xmld;
    }
};

class datatool
{
protected:
    string jsondata;

public:
    datatool() = default;
    explicit datatool(const string& ip) : jsondata(ip) {}

    virtual void analyse()
    {
        cout << "analysing the " << jsondata << endl;
    }

    virtual ~datatool() = default;
};

class adaptor : public datatool
{
private:
    unique_ptr<xmldata> pxml;  // owns xmldata now

    static string convertXmlToJson(const string& xml)
    {
        // Dummy conversion logic
        return "json data from (" + xml + ")";
    }

public:
    explicit adaptor(unique_ptr<xmldata> p)
        : datatool(convertXmlToJson(p->getxmldata())), pxml(std::move(p))
    {
    }

    void analyse() override
    {
        cout << "converting the " << pxml->getxmldata() << " to json" << endl;
        datatool::analyse();  // call base class analyse properly
    }
};

class client
{
public:
    void processdata(datatool* p)
    {
        if (p)
            p->analyse();
    }
};

int main()
{
    // Create xmldata with unique_ptr ownership
    auto pxml = make_unique<xmldata>("sample xml data");

    // Transfer ownership to adaptor
    unique_ptr<datatool> pd = make_unique<adaptor>(std::move(pxml));

    client pc;
    pc.processdata(pd.get());

    // No manual delete needed
}
