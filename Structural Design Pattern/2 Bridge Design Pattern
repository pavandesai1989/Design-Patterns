#include <iostream>
using namespace std;

// Implementor interface
class ColorImplementor
{
public:
    virtual void FillColor() = 0;
    virtual ~ColorImplementor() = default;
};

class BlueColorImplementor : public ColorImplementor
{
public:
    void FillColor() override
    {
        cout << "Filling color using the BLUE" << endl;
    }
};

class GreenColorImplementor : public ColorImplementor
{
public:
    void FillColor() override
    {
        cout << "Filling color using the GREEN" << endl;
    }
};

// Abstraction
class Shape
{
protected:
    ColorImplementor* pColorImpl = nullptr;

public:
    virtual ~Shape()
    {
        delete pColorImpl;  // clean up current color
    }

    void SetColor(ColorImplementor* pColor)
    {
        if (pColorImpl) delete pColorImpl;  // delete old color before replacing
        pColorImpl = pColor;
    }

    virtual void Colorit() = 0;
    virtual void Draw() = 0;
};

class Rectangle : public Shape
{
public:
    void Draw() override
    {
        cout << "Rectangle created" << endl;
    }

    void Colorit() override
    {
        if (pColorImpl)
        {
            pColorImpl->FillColor();
            cout << "Color filled" << endl;
        }
        else
        {
            cout << "No color implementor set!" << endl;
        }
    }
};

class Circle : public Shape
{
public:
    void Draw() override
    {
        cout << "Circle created" << endl;
    }

    void Colorit() override
    {
        if (pColorImpl)
        {
            pColorImpl->FillColor();
            cout << "Color filled" << endl;
        }
        else
        {
            cout << "No color implementor set!" << endl;
        }
    }
};

int main()
{
    Shape* pRectShape = new Rectangle();
    pRectShape->Draw();

    Shape* pCircleShape = new Circle();
    pCircleShape->Draw();

    // Fill blue color
    pRectShape->SetColor(new BlueColorImplementor());
    pRectShape->Colorit();

    // Fill green color
    pRectShape->SetColor(new GreenColorImplementor());
    pRectShape->Colorit();

    // Clean up
    delete pRectShape;
    delete pCircleShape;

    return 0;
}
