Payment Processing System Without Strategy Pattern

Imagine we have a system that processes payments using various methods such as credit cards, PayPal, and bank transfers. Without using the Strategy design pattern, you might implement all payment logic within a single class using conditional statements. This approach can lead to code that's difficult to maintain, extend, and test.

#include <iostream>
#include <string>

class PaymentProcessor {
private:
    std::string paymentMethod;  // Current payment method

public:
    // Constructor to set the initial payment method
    PaymentProcessor(const std::string& method) : paymentMethod(method) {}

    // Method to change the payment method dynamically
    void setPaymentMethod(const std::string& method) {
        paymentMethod = method;
    }

    // Method to process payment based on the current payment method
    void processPayment(int amount) {
        if (paymentMethod == "credit_card") {
            std::cout << "Processing payment of $" << amount << " using Credit Card." << std::endl;
            // Add logic specific to credit card payment
        } else if (paymentMethod == "paypal") {
            std::cout << "Processing payment of $" << amount << " using PayPal." << std::endl;
            // Add logic specific to PayPal payment
        } else if (paymentMethod == "bank_transfer") {
            std::cout << "Processing payment of $" << amount << " using Bank Transfer." << std::endl;
            // Add logic specific to bank transfer payment
        } else {
            std::cout << "Invalid payment method selected!" << std::endl;
        }
    }
};

// Main function to demonstrate the PaymentProcessor class without Strategy Pattern
int main() {
    // Create a PaymentProcessor object with an initial payment method
    PaymentProcessor processor("credit_card");
    processor.processPayment(100);

    // Change the payment method to PayPal
    processor.setPaymentMethod("paypal");
    processor.processPayment(200);

    // Change the payment method to Bank Transfer
    processor.setPaymentMethod("bank_transfer");
    processor.processPayment(300);

    return 0;
}



Disadvantages of This Approach
Lack of Flexibility: Each time you need to add a new payment method, you must modify the processPayment method, violating the Open/Closed Principle (code should be open for extension but closed for modification).

Code Duplication: The use of if-else statements for different payment methods can lead to duplicated code and increased complexity.

Difficult to Maintain: With multiple payment methods, the processPayment function becomes long and challenging to manage.

Tightly Coupled Code: All payment logic is tightly coupled within a single class, making it difficult to reuse the logic elsewhere or change one method without potentially affecting others.


*******Using strategy ****
#include <iostream>

// Step 1: Strategy Interface
class PaymentStrategy {
public:
    virtual ~PaymentStrategy() {}
    virtual void pay(int amount) = 0;  // Pure virtual function for payment processing
};

// Step 2: Concrete Strategy Classes

// Credit Card payment strategy
class CreditCardPayment : public PaymentStrategy {
public:
    void pay(int amount) override {
        std::cout << "Processing payment of $" << amount << " using Credit Card." << std::endl;
    }
};

// PayPal payment strategy
class PayPalPayment : public PaymentStrategy {
public:
    void pay(int amount) override {
        std::cout << "Processing payment of $" << amount << " using PayPal." << std::endl;
    }
};

// Bank Transfer payment strategy
class BankTransferPayment : public PaymentStrategy {
public:
    void pay(int amount) override {
        std::cout << "Processing payment of $" << amount << " using Bank Transfer." << std::endl;
    }
};

// Step 3: Context Class
class PaymentProcessor {
private:
    PaymentStrategy* paymentStrategy;  // Raw pointer to manage strategy

public:
    // Constructor to set the initial payment strategy
    PaymentProcessor(PaymentStrategy* strategy) : paymentStrategy(strategy) {}

    // Destructor to clean up dynamically allocated strategy
    ~PaymentProcessor() {
        delete paymentStrategy;  // Delete the currently assigned strategy
    }

    // Method to set the payment strategy dynamically
    void setPaymentStrategy(PaymentStrategy* strategy) {
        delete paymentStrategy;  // Delete the previous strategy to prevent memory leaks
        paymentStrategy = strategy;
    }

    // Method to process payment using the current strategy
    void processPayment(int amount) {
        if (paymentStrategy) {
            paymentStrategy->pay(amount);
        } else {
            std::cout << "Payment strategy is not set." << std::endl;
        }
    }
};

// Main function to demonstrate Strategy Pattern
int main() {
    // Use CreditCardPayment strategy initially
    PaymentProcessor processor(new CreditCardPayment());
    processor.processPayment(100);

    // Change to PayPalPayment strategy
    processor.setPaymentStrategy(new PayPalPayment());
    processor.processPayment(200);

    // Change to BankTransferPayment strategy
    processor.setPaymentStrategy(new BankTransferPayment());
    processor.processPayment(300);

    return 0;
}
