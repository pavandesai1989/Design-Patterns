class PaymentProcessor {
    private:
        void creditCardPaymentProcessor(int amount){
            cout << "Processing the amount $" << amount << " though Credit Card." << endl;
        }

        void UPIPaymentProcessor(int amount){
            cout << "Processing the amount $" << amount << " though UPI." << endl;
        }

    public:
        void processPayment(int amount, string paymentMethod){
            if (paymentMethod == "CREDIT_CARD") {
                creditCardPaymentProcessor(amount);
            } else if (paymentMethod == "UPI") {
                UPIPaymentProcessor(amount);
            } else {
                cout << "Not a valid payment method." << endl;
            }
        }
};

int main() {
    PaymentProcessor pObj;
    pObj.processPayment(100, "CREDIT_CARD");

    return 0;
}

To introduce another payment method, you need to make a change in the ‘processPayment’ method, adding another payment check. This would also require adding another method in ‘private’. For eg:
void netBankingPaymentProcessor(int amount){
  cout << "Processing the amount $" << amount << " though net banking." << endl;
}

Can you identify the problem in the above solution?

We need to modify our code with every new addition to the payment method.

Now remember the SOLID Principles:

It should handle a single responsibility. In the above code, it is handling multiple payment responsibilities.
It should be Open/Closed, which means open for extension and closed for modification. In the above code, we are modifying existing methods to incorporate a new payment method.

Let’s apply the strategy design pattern to the above example:



// Strategy Interface
class PaymentStrategy {
    public:
        virtual void processPayment(int amount) = 0;
        virtual ~PaymentStrategy() {}
};

// Concrete class
class CreditCardPaymentProcessor: public PaymentStrategy {
    public:
        void processPayment(int amount) override{
            cout << "Processing the amount $" << amount << " though Credit Card." << endl;
        }
};

// Concrete class
class UPIPaymentProcessor: public PaymentStrategy {
     public:
        void processPayment(int amount) override{
            cout << "Processing the amount $" << amount << " though UPI." << endl;
        }
};

class PaymentProcessor {
    private:
        PaymentStrategy *strategy;

    public:
        void setPaymentStrategy(PaymentStrategy* strategy){
            this->strategy = strategy;
        }

        void processPayment(int amount){
            if(strategy){
                strategy->processPayment(amount);
            }
        }
};

int main() {
    PaymentProcessor processor;
    
    CreditCardPaymentProcessor payment;
    processor.setPaymentStrategy(&payment);

    processor.processPayment(100);

    return 0;
}


In the above example, we separated out the ‘paymentStrategy’ abstract class and created subclasses based on the different payment methods available.

The above code is easy to maintain and is extensible without changing the existing code.

This is where the strategy design pattern comes into play. When users are given multiple options to choose from, we create an interface.

Real-life examples of the strategy design pattern:
Drawing tools: Allowing users to switch between different graphic tools eg: pencil, eraser, colors, etc.
Authentications and authorizations: username/password based, OAuth, Token based, etc.
Language translations
In game development: players have their own behaviors. Eg: defensive, etc.
File compression
In the navigation system, users can choose different paths. Eg: fastest route, shortest route, no toll roads, etc
In a Parking lot: eg: near to the entrance, near to exit, near to escalator, etc.
